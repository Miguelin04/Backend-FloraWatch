# Generated by Django 5.2.7 on 2025-10-04 16:59

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SatelliteDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('api_endpoint', models.URLField(verbose_name='Endpoint API')),
                ('requires_api_key', models.BooleanField(default=False, verbose_name='Requiere API Key')),
                ('update_frequency', models.CharField(help_text='Frecuencia de actualización (ej: daily, weekly)', max_length=50, verbose_name='Frecuencia de actualización')),
                ('resolution', models.CharField(help_text='Resolución espacial (ej: 250m, 1km)', max_length=50, verbose_name='Resolución')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fuente de datos satelital',
                'verbose_name_plural': 'Fuentes de datos satelitales',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SatelliteDataCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(choices=[('ndvi', 'NDVI - Índice de Vegetación'), ('evi', 'EVI - Índice de Vegetación Mejorado'), ('lst', 'LST - Temperatura de Superficie'), ('precipitation', 'Precipitación'), ('temperature', 'Temperatura'), ('modis_phenology', 'MODIS Fenología')], max_length=50, verbose_name='Tipo de datos')),
                ('collection_date', models.DateField(verbose_name='Fecha de recolección')),
                ('start_date', models.DateField(verbose_name='Fecha inicio datos')),
                ('end_date', models.DateField(verbose_name='Fecha fin datos')),
                ('quality_score', models.FloatField(help_text='Calidad de los datos (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Calidad')),
                ('cloud_coverage', models.FloatField(blank=True, help_text='Cobertura de nubes (%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Cobertura nubes (%)')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('processing', 'Procesando'), ('completed', 'Completado'), ('error', 'Error')], default='pending', max_length=20, verbose_name='Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plants.location', verbose_name='Ubicación')),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='satellite_data.satellitedatasource', verbose_name='Fuente')),
            ],
            options={
                'verbose_name': 'Colección de datos satelital',
                'verbose_name_plural': 'Colecciones de datos satelitales',
                'ordering': ['-collection_date'],
                'unique_together': {('location', 'data_source', 'data_type', 'start_date', 'end_date')},
            },
        ),
        migrations.CreateModel(
            name='SatelliteDataPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='Fecha y hora')),
                ('value', models.FloatField(verbose_name='Valor principal')),
                ('quality_flag', models.CharField(choices=[('good', 'Buena'), ('fair', 'Regular'), ('poor', 'Pobre'), ('bad', 'Mala')], default='good', max_length=20, verbose_name='Calidad')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Metadatos adicionales en formato JSON', verbose_name='Metadatos')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='Latitud específica')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='Longitud específica')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_points', to='satellite_data.satellitedatacollection', verbose_name='Colección')),
            ],
            options={
                'verbose_name': 'Punto de datos satelital',
                'verbose_name_plural': 'Puntos de datos satelitales',
                'ordering': ['-timestamp'],
                'unique_together': {('collection', 'timestamp')},
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Fecha')),
                ('temperature_min', models.FloatField(blank=True, null=True, verbose_name='Temp. mínima (°C)')),
                ('temperature_max', models.FloatField(blank=True, null=True, verbose_name='Temp. máxima (°C)')),
                ('temperature_avg', models.FloatField(blank=True, null=True, verbose_name='Temp. promedio (°C)')),
                ('humidity', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Humedad (%)')),
                ('precipitation', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Precipitación (mm)')),
                ('wind_speed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Velocidad viento (km/h)')),
                ('wind_direction', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)], verbose_name='Dirección viento (°)')),
                ('pressure', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(800), django.core.validators.MaxValueValidator(1200)], verbose_name='Presión (hPa)')),
                ('data_source', models.CharField(default='api', max_length=100, verbose_name='Fuente de datos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plants.location', verbose_name='Ubicación')),
            ],
            options={
                'verbose_name': 'Datos meteorológicos',
                'verbose_name_plural': 'Datos meteorológicos',
                'ordering': ['-date'],
                'unique_together': {('location', 'date')},
            },
        ),
    ]
