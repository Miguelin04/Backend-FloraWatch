# Generated by Django 5.2.7 on 2025-10-04 16:59

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('lstm', 'LSTM Neural Network'), ('cnn', 'Convolutional Neural Network'), ('ensemble', 'Ensemble Model'), ('isolation_forest', 'Isolation Forest (Anomalías)')], max_length=50, verbose_name='Tipo de modelo')),
                ('version', models.CharField(max_length=20, verbose_name='Versión')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('status', models.CharField(choices=[('training', 'Entrenando'), ('active', 'Activo'), ('inactive', 'Inactivo'), ('deprecated', 'Obsoleto'), ('error', 'Error')], default='training', max_length=20, verbose_name='Estado')),
                ('accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Precisión')),
                ('hyperparameters', models.JSONField(blank=True, default=dict, help_text='Hiperparámetros del modelo en JSON', verbose_name='Hiperparámetros')),
                ('model_file_path', models.CharField(blank=True, max_length=500, verbose_name='Ruta archivo modelo')),
                ('training_data_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Tamaño datos entrenamiento')),
                ('training_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Inicio entrenamiento')),
                ('training_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Fin entrenamiento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
            ],
            options={
                'verbose_name': 'Modelo de IA',
                'verbose_name_plural': 'Modelos de IA',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('accuracy', 'Precisión'), ('precision', 'Precisión (P)'), ('recall', 'Recall (R)'), ('f1_score', 'F1 Score'), ('mse', 'Error Cuadrático Medio'), ('mae', 'Error Absoluto Medio'), ('confusion_matrix', 'Matriz de Confusión')], max_length=50, verbose_name='Tipo métrica')),
                ('value', models.FloatField(verbose_name='Valor')),
                ('evaluation_date', models.DateTimeField(verbose_name='Fecha evaluación')),
                ('dataset_size', models.PositiveIntegerField(verbose_name='Tamaño dataset')),
                ('dataset_description', models.TextField(blank=True, verbose_name='Descripción dataset')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detalles adicionales de la métrica', verbose_name='Detalles')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.aimodel', verbose_name='Modelo')),
            ],
            options={
                'verbose_name': 'Métrica de rendimiento',
                'verbose_name_plural': 'Métricas de rendimiento',
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.CreateModel(
            name='PredictionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('flowering_detection', 'Detección de Floración'), ('flowering_prediction', 'Predicción de Floración'), ('anomaly_detection', 'Detección de Anomalías'), ('trend_analysis', 'Análisis de Tendencias')], max_length=50, verbose_name='Tipo de sesión')),
                ('start_date', models.DateField(verbose_name='Fecha inicio análisis')),
                ('end_date', models.DateField(verbose_name='Fecha fin análisis')),
                ('total_predictions', models.PositiveIntegerField(default=0, verbose_name='Total predicciones')),
                ('successful_predictions', models.PositiveIntegerField(default=0, verbose_name='Predicciones exitosas')),
                ('average_confidence', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Confianza promedio')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('running', 'Ejecutando'), ('completed', 'Completada'), ('error', 'Error')], default='pending', max_length=20, verbose_name='Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completado en')),
                ('executed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Ejecutado por')),
                ('locations', models.ManyToManyField(blank=True, to='plants.location', verbose_name='Ubicaciones analizadas')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.aimodel', verbose_name='Modelo')),
                ('plant_monitors', models.ManyToManyField(blank=True, to='plants.plantmonitor', verbose_name='Plantas específicas')),
            ],
            options={
                'verbose_name': 'Sesión de predicción',
                'verbose_name_plural': 'Sesiones de predicción',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FloweringPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(choices=[('detection', 'Detección actual'), ('forecast', 'Predicción futura'), ('anomaly', 'Detección de anomalía')], max_length=20, verbose_name='Tipo')),
                ('prediction_date', models.DateField(verbose_name='Fecha predicción')),
                ('target_date', models.DateField(verbose_name='Fecha objetivo')),
                ('flowering_probability', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Probabilidad floración')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Confianza')),
                ('intensity_estimate', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Intensidad estimada (%)')),
                ('input_features', models.JSONField(default=dict, help_text='Características de entrada utilizadas para la predicción', verbose_name='Características entrada')),
                ('notes', models.TextField(blank=True, verbose_name='Notas')),
                ('actual_result', models.BooleanField(blank=True, null=True, verbose_name='Resultado real')),
                ('validation_date', models.DateField(blank=True, null=True, verbose_name='Fecha validación')),
                ('validation_notes', models.TextField(blank=True, verbose_name='Notas validación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plants.location', verbose_name='Ubicación')),
                ('plant_monitor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.plantmonitor', verbose_name='Planta específica')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='predictions.predictionsession', verbose_name='Sesión')),
            ],
            options={
                'verbose_name': 'Predicción de floración',
                'verbose_name_plural': 'Predicciones de floración',
                'ordering': ['-prediction_date', '-confidence_score'],
            },
        ),
        migrations.CreateModel(
            name='TrainingDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre')),
                ('dataset_type', models.CharField(choices=[('phenocam', 'PhenoCam Network'), ('modis', 'MODIS Phenology'), ('inaturalist', 'iNaturalist'), ('synthetic', 'Datos Sintéticos'), ('user_contributed', 'Contribución Usuarios'), ('mixed', 'Dataset Mixto')], max_length=50, verbose_name='Tipo dataset')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('total_samples', models.PositiveIntegerField(verbose_name='Total muestras')),
                ('positive_samples', models.PositiveIntegerField(verbose_name='Muestras positivas')),
                ('negative_samples', models.PositiveIntegerField(verbose_name='Muestras negativas')),
                ('date_range_start', models.DateField(verbose_name='Inicio rango fechas')),
                ('date_range_end', models.DateField(verbose_name='Fin rango fechas')),
                ('file_path', models.CharField(max_length=500, verbose_name='Ruta archivo')),
                ('file_size_mb', models.FloatField(verbose_name='Tamaño archivo (MB)')),
                ('quality_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Puntuación calidad')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadatos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
            ],
            options={
                'verbose_name': 'Dataset de entrenamiento',
                'verbose_name_plural': 'Datasets de entrenamiento',
                'ordering': ['-created_at'],
            },
        ),
    ]
